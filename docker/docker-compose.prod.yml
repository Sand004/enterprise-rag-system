version: '3.8'

services:
  # Production configuration with optimizations
  app:
    image: enterprise-rag-system:latest
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
    env_file:
      - .env.prod
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    depends_on:
      - redis
      - postgres
      - qdrant
    networks:
      - rag-network-prod

  # Vector Database - Qdrant (Production)
  qdrant:
    image: qdrant/qdrant:latest
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY}
      - QDRANT__SERVICE__ENABLE_TLS=true
    deploy:
      placement:
        constraints:
          - node.labels.storage == ssd
      resources:
        limits:
          cpus: '4'
          memory: 16G
    networks:
      - rag-network-prod

  # PostgreSQL (Production)
  postgres:
    image: pgvector/pgvector:pg16
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_MAX_CONNECTIONS=200
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      placement:
        constraints:
          - node.labels.storage == ssd
      resources:
        limits:
          cpus: '4'
          memory: 8G
    networks:
      - rag-network-prod

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 4gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    networks:
      - rag-network-prod

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - rag-network-prod

volumes:
  qdrant_storage:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  rag-network-prod:
    driver: overlay
    encrypted: true